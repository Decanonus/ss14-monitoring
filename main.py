import streamlit as st
import requests
import json
from datetime import datetime, timedelta
import pandas as pd
import pytz
import time

# –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
VERSION = "1.4"

st.set_page_config(
    page_title="SS14 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤",
    page_icon="üöÄ",
    layout="wide"
)

st.markdown("""
    <style>
        .metric-container {
            padding: 5px;
            border-radius: 5px;
            margin: 1px 0;
            width: 100%;
            min-height: 35px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .metric-label {
            font-size: 12px;
            font-weight: bold;
        }
        .metric-value {
            font-size: 16px;
            font-weight: bold;
        }
        .countdown {
            font-size: 14px;
            margin-bottom: 10px;
            padding: 5px;
            background-color: #2b2b2b;
            border-radius: 5px;
            text-align: center;
        }
        .high-players {
            background-color: rgba(0, 255, 0, 0.2);
        }
        .medium-players {
            background-color: rgba(255, 255, 0, 0.2);
        }
        .low-players {
            background-color: rgba(255, 0, 0, 0.2);
        }
        .very-low-players {
            background-color: black;
        }
    </style>
""", unsafe_allow_html=True)

def get_moscow_time():
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz)

def get_server_stats():
    url = 'https://hub.spacestation14.com/api/servers'
    try:
        r = requests.get(url)
        jsonn = json.loads(r.text)
        
        server_groups = {
            '–ö–æ—Ä–≤–∞–∫—Å': ['Corvax'],
            '–°–∞–Ω—Ä–∞–π–∑': ['–†–´–ë–¨–Ø', 'LUST', 'SUNRISE'],
            '–ò–º–ø–µ—Ä–∏–∞–ª': ['Imperial'],
            '–°–ø–µ–π—Å –°—Ç–æ—Ä–∏—Å': ['Stories'],
            '–ú—ë—Ä—Ç–≤—ã–π –ö–æ—Å–º–æ—Å': ['–ú–Å–†–¢–í–´–ô'],
            '–†–µ–∑–µ—Ä–≤': ['Reserve'],
            '–ê—Ç–∞—Ä–∞–∫—Å–∏—è': ['Ataraxia'],
            '–í–∏–∫—Ç–æ—Ä–∏—è': ['Victoria'],
            '–°–°220': ['SS220'],
            '–í—Ä–µ–º—è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–π': ['–í—Ä–µ–º—è']
        }

        stats = []
        for group_name, keywords in server_groups.items():
            total_players = sum(
                servers['statusData']['players']
                for servers in jsonn
                for keyword in keywords
                if keyword in servers['statusData']['name']
            )
            stats.append({
                '–°–µ—Ä–≤–µ—Ä': group_name,
                '–ò–≥—Ä–æ–∫–∏': total_players
            })
        
        return sorted(stats, key=lambda x: x['–ò–≥—Ä–æ–∫–∏'], reverse=True)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def main():
    st.title("üöÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ SS14")
    st.caption(f"–í–µ—Ä—Å–∏—è {VERSION}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if 'last_update' not in st.session_state:
        st.session_state.last_update = datetime.now()
        st.session_state.stats = get_server_stats()
        st.session_state.next_update = datetime.now() + timedelta(seconds=10)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    time_left = (st.session_state.next_update - datetime.now()).total_seconds()
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if time_left <= 0:
        st.session_state.last_update = datetime.now()
        st.session_state.stats = get_server_stats()
        st.session_state.next_update = datetime.now() + timedelta(seconds=10)
        time_left = 10
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–π–º–µ—Ä
    st.markdown(f"""
        <div class="countdown">
            –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {max(0, int(time_left))} —Å–µ–∫—É–Ω–¥
        </div>
    """, unsafe_allow_html=True)
    
    st.write(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {st.session_state.last_update.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤
    stats = st.session_state.stats
    if stats:
        df = pd.DataFrame(stats)
        
        for row in stats:
            players = row['–ò–≥—Ä–æ–∫–∏']
            if players >= 300:
                style_class = "high-players"
            elif players >= 100:
                style_class = "medium-players"
            elif players < 20:
                style_class = "very-low-players"
            else:
                style_class = "low-players"
            
            st.markdown(f"""
                <div class="metric-container {style_class}">
                    <div class="metric-label">{row['–°–µ—Ä–≤–µ—Ä']}</div>
                    <div class="metric-value">{players}</div>
                </div>
            """, unsafe_allow_html=True)
        
        with st.container():
            st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤")
            st.bar_chart(df.set_index('–°–µ—Ä–≤–µ—Ä')['–ò–≥—Ä–æ–∫–∏'], use_container_width=True)
            
            st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.dataframe(df, use_container_width=True, hide_index=True)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    time.sleep(1)
    st.experimental_rerun()

if __name__ == '__main__':
    main()
